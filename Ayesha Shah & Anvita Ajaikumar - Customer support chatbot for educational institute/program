import argparse  # Command line parsing
import configparser  # Saving the models parameters
import datetime  # Chronometer
import os  # Files management
import tensorflow as tf
import numpy as np
import math

from tqdm import tqdm  # Progress bar
from tensorflow.python import debug as tf_debug

from chatbot.textdata import TextData
from chatbot.model import Model


class Chatbot:
    
		# main class which launches the training or testing mode

    class TestMode:
        
				# simple structure representing the different testing modes
				
        ALL = 'all'
        INTERACTIVE = 'interactive'  # the user can write their own questions
        DAEMON = 'daemon'  # the chatbot runs in the background and can regularly be called to predict something

    def __init__(self):
        
        # model/dataset parameters
				
        self.args = None

        # task specific object
				
        self.textData = None  # dataset
        self.model = None  # sequence to sequence model

        # tensorflow utilities for convenience saving/logging
				
        self.writer = None
        self.saver = None
        self.modelDir = ''  # where the model is saved
        self.globStep = 0  # represents the number of iterations for the current model

        # tensorFlow main session (we keep track for the daemon)
				
        self.sess = None
		
    def parseArgs(args):
        """
        Parse the arguments from the given command line
        Args:
            args (list<str>): List of arguments to parse. If None, the default sys.argv will be parsed
        """

        parser = argparse.ArgumentParser()

        # Global options
        globalArgs = parser.add_argument_group('Global options')
        globalArgs.add_argument('')
